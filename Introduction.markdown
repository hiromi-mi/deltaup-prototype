# Manifest

## はじめに

とり急ぎ

##目的 (なぜつくるのか)
ソフトウエアの差分更新は多くのアップデートソルーションとして使われているが、現時点の方式では実行ファイルの差分を効率よく生成する方法には課題がある。それはソースコード上のわずかの違いでも実行ファイルの差分が膨れあがることである。

その要因には、実行ファイル内部のアドレスの扱いがある。
たとえば、C言語で書かれたプログラムで、とある関数内で配列の境界チェックを加えたとする。ソースコード上での差分は高々数行であり微小である。
一方、実行バイナリにすると、実行バイナリ中の参照アドレスなどがずれるため、ソースコードを書き換えた関数以外でも多数の場所の値が書き変わる。そのため、テキストの差分処理方法と似たような (最長部分文字列一致問題を解くような) 形で差分を生成すると、ソースコードの差分と比べて大きなサイズの差分になってしまう。それは、 “数値の違い” を差分として扱わず、単なるデータの違いとして扱っているので、ためである。

差分を小さく生成する方法として、筆者は Google Chrome の差分更新機構 Courgette に注目した。Courgette ではコンパイル時の情報を使う方法を用いて差分を小さくしている。
一連のビルド処理の最中には参照アドレスの処理が行なわれるため、そのタイミングで新旧の差分処理を行えば、どの部分のアドレスが書き変わったかは把握できる。また、ソースコードを書き換えた関数に直接関係しない部分ではアドレスは”ずれる” だけであり、ほとんどの場所においてずれの差は一定であり共通化できる。そこで、差分データとして、今までのような一致しない部分文字列だけでなく、”アドレスのずれ方” を持つようにすれば、その分実行ファイルの差分を小さくできると考えられる。

筆者は Courgette の考えを発展させて、実行バイナリの逆アセンブル結果をもとに、Google Chrome 以外の一般的な実行ファイルに対応させたバイナリ差分形式を構築したい。また、Courgette ではアドレスのずれを除くと一般的なバイナリ差分形式と似たような内容となっているが、それだけではなくELF ヘッダの構造も読みより小さな差分を生成できるようにしたい。

## 作成したいものの概要 (なにをつくるか)
バージョンが違う実行形式2ファイルについて、逆アセンブル情報を用いて効率よく差分を格納する形式を考案し、差分作成プログラムと差分適用プログラムを開発する。

まずは Google Chrome 更新時に使われる差分生成プログラム  Courgette[1] をELF バイナリ一般に利用できる形で再実装することからはじめたい。

具体的に差分生成の流れを整理する。
まず、差分前のファイルと差分後のファイルをそれぞれ逆アセンブルし書き換えるべき命令アドレスの一覧を抽出する。(RIP 相対アドレッシングなど複数方式あるのでそれぞれに対応させる必要がある。) その後、最大部分文字列一致問題の要領で差分前と差分後の (ここを ELF のヘッダ構造を用いて効率よくできないかと考えている) 対応を作成し、それぞれの変化を対応付ける。その後、実際に差分を作成する。
命令の増加、減少、およびアドレス書き換えをそれぞれ “コマンド” とみなし、コマンドの列として差分を作成する。(Courgette ではとある差分情報を持ったクラスを binary vector としてシリアライズし一般的な差分生成プログラムを呼び出しているが、筆者の実装では今のところ 論文 [2] の内容を参考に(対応する命令の)アドレス書き換えるコマンドとして上の内容を構成したいと考えている。) 
最後に、そのデータをバイナリとして出力する。
差分適用時においては差分作成前のプログラムを逆アセンブルし、差分に書かれたコマンドを適用して再びアセンブルすればよい。

## どんな出し方を考えているか
オープンソースソフトウエアとして公開する予定である。なるべくソフトウエアをポータブルにして既存パッケージシステムや他の差分更新機構の一部として組込まれるようにしたい。

## 斬新さの主張
少なくとも筆者が調べた限りではこのようなプログラムは見あたらなかった。最も近いのは Courgette であるが、Google Chrome と Chromium でしか利用できない。

## 関連研究および実装
バイナリファイル差分プログラムの既存実装としては:
* VCDIFF (RFC 3824) : https://www.rfc-editor.org/info/rfc3284
* bsdiff :https://github.com/mendsley/bsdiff 
などがある。これらのソフトウエアでは、最長文字列の一致を探し、その上で不足している分を継ぎ足す実装をしている。そのため実行ファイルに対して適用するとソースコード上での微小な修正でも差分が大きくなってしまう。
また、上のような実装を用いてLinux ディストリビューションで用いられているパッケージマネージャ dpkg や rpm では差分更新用パッケージ debdelta http://debdelta.debian.net/ や Delta RPM  が用いられている。
今回の実装に最も近いのは Google Chrome の Courgette [1] であり、筆者のアプローチと似たアセンブル時情報を使うものであり、これは Google Chrome や Chromium 専用である。

“アドレス定数ずれ”の処理に別のアプローチを用いているのが、論文 [2] である。この論文では、上のような最長文字列一致問題として差分を構成するときに、値のずれも考慮するように変更している。この方法では逆アセンブルはしなくて済むが、大規模なデータの処理および正確性に課題が残る。

また、バイナリ差分を用いたソフトウエア更新ファイル配布高速化の観点から、Android の APK ファイルの最適な配布方法を探す取り組みが行なわれている。例えば 論文 [3] DELTA では, APK ファイルの内部構造を分割して差分を適用することで、APKファイルの配布を高速化している。

## 期待される効果
### ソフトウエア差分更新機構の普及
- 例えば Arch Linux の pacman には差分更新機構が一時期存在したが、使われずメンテナンスがなされてないとして削除された。それは Arch Linux の 更新機構では高々3割程度の通信量削減にしかつながらず、サーバー側を対応させるほどの魅力的なものにならなかったことが一因と考えている。以上のようにより魅力的にすれば多少なりともユーザーがついてくるのではと考える。

- スマートフォンデバイスなどの脆弱性修正の迅速化。
従量制通信などでは更新ファイルをダウンロードしない選択肢が広く用いられているが、各種アプリなどのソフトウエアアップデートでの修正パッチ配布を遅らせていることになる。この選択肢が広く用いられている一因にはパッケージ更新により多量の通信が発生し、それにより請求額が高額になることがある。通信料を減らせれば、より多くのユーザーが迅速に更新を適用し、よりセキュアになることが期待される。

参考文献
* [1] Courgette https://www.chromium.org/developers/design-documents/software-updates-courgette 
* [2] G. Motta, J. Gustafson and S. Chen, "Differential Compression of Executable Code," 2007 Data Compression Conference (DCC'07), Snowbird, UT, 2007, pp. 103-112, doi: 10.1109/DCC.2007.32.
* [3] R. Spolaor, E. D. Santo and M. Conti, "DELTA: Data Extraction and Logging Tool for Android," in IEEE Transactions on Mobile Computing, vol. 17, no. 6, pp. 1289-1302, 1 June 2018, doi: 10.1109/TMC.2017.2762692.
